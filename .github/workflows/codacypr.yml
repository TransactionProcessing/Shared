name: Sync Codacy Issues to GitHub

on:
  check_run:
    types: [completed]

jobs:
  sync-issues:
    if: github.event.check_run.name == 'Codacy Static Code Analysis' &&
        github.event.check_run.pull_requests != null &&
        github.event.check_run.pull_requests != ''
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set PR number
        run: echo "PR_NUMBER=${{ github.event.check_run.pull_requests[0].number }}" >> $GITHUB_ENV

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch Codacy issues (v3 API)
        env:
          CODACY_TOKEN: ${{ secrets.CODACY_API_TOKEN }}
          PROJECT_UUID: ${{ secrets.CODACY_PROJECT_UUID }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
          OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          curl -s -H "api-token: $CODACY_TOKEN" \
            "https://api.codacy.com/api/v3/analysis/organizations/gh/$OWNER/repositories/$REPO_NAME/pullRequests/$PR_NUMBER/issues?severity=MEDIUM,CRITICAL" \
            -o codacy_issues.json
          echo "Found $(jq '.data.issues | length' codacy_issues.json) issues"

      - name: Authenticate gh CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Sync Codacy issues to GitHub
        env:
          REPO: ${{ github.repository }}
        run: |
          cat codacy_issues.json | jq -c '.data.issues[]' | while read issue; do
            ISSUE_ID=$(echo "$issue" | jq -r '.id')
            TITLE=$(echo "$issue" | jq -r '.message' | cut -c1-250)
            FILE=$(echo "$issue" | jq -r '.file')
            LINE=$(echo "$issue" | jq -r '.line')
            ISSUE_BODY="File: $FILE\nLine: $LINE\nCodacy ID: $ISSUE_ID"

            # Check if GitHub issue exists
            EXISTING=$(gh issue list --repo $REPO --search "Codacy ID: $ISSUE_ID" --json number --jq '.[].number')
            if [ -z "$EXISTING" ]; then
              echo "Creating issue: $TITLE"
              gh issue create --repo $REPO --title "[Codacy] $TITLE" --body "$ISSUE_BODY"
            else
              echo "Updating existing issue #$EXISTING: $TITLE"
              gh issue edit $EXISTING --repo $REPO --body "$ISSUE_BODY"
            fi
          done

      - name: Close resolved GitHub issues
        env:
          REPO: ${{ github.repository }}
        run: |
          gh issue list --repo $REPO --state open --json number,body | jq -c '.[]' | while read gh_issue; do
            ISSUE_NUMBER=$(echo "$gh_issue" | jq -r '.number')
            ISSUE_BODY=$(echo "$gh_issue" | jq -r '.body')
            CODACY_ID=$(echo "$ISSUE_BODY" | grep -oP 'Codacy ID: \K[0-9a-f-]+')
            if ! jq -e --arg id "$CODACY_ID" '.data.issues[] | select(.id==$id)' codacy_issues.json > /dev/null; then
              echo "Closing resolved GitHub issue #$ISSUE_NUMBER"
              gh issue close $ISSUE_NUMBER --repo $REPO
            fi
          done

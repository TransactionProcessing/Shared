name: Codacy Bootstrap Issues

on:
  workflow_dispatch:  # allows manual trigger

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch all outstanding Codacy issues
        run: |
          curl --request POST \
            --url https://app.codacy.com/api/v3/analysis/organizations/gh/TransactionProcessing/repositories/Shared/issues/search \
            --header "api-token: ${{ secrets.CODACY_API_TOKEN }}" \
            --header "content-type: application/json" \
            --data '{
            "levels": ["Error", "Warning"]
            }' \
          -o codacy_issues.json

          # Debug: see response
          cat codacy_issues.json

          # Filter only Medium+/Warning+ issues
          jq '[.data[] | select(.patternInfo.severityLevel=="Warning" or .patternInfo.severityLevel=="Error")]' codacy_issues.json > filtered_issues.json

      - name: Create GitHub issues for outstanding Codacy findings
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const issues = JSON.parse(fs.readFileSync('filtered_issues.json', 'utf8'));

            // Group Codacy issues by unique issueId
            const grouped = {};
            for (const issue of rawIssues) {
              if (!grouped[issue.issueId]) {
                grouped[issue.issueId] = [];
              }
              grouped[issue.issueId].push(issue);
            }
            
            // Fetch all open issues labeled "codacy" to prevent duplicates
            const openIssues = await github.paginate(
              github.rest.issues.listForRepo,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: "open",
                labels: "codacy"
              }
            );
            
            const existingIds = new Set();
            for (const ghIssue of openIssues) {
              const match = ghIssue.body.match(/codacy-issue-(\S+)/);
              if (match) existingIds.add(match[1]);
            }
            
            // Create new GitHub issues only for Codacy issueIds not already present
            for (const [issueId, issues] of Object.entries(grouped)) {
              if (!existingIds.has(issueId)) {
                const key = `codacy-issue-${issueId}`;
                const first = issues[0]; // use first for title/severity
                const title = `[Codacy] ${first.patternInfo.severityLevel} issue(s) in ${first.filePath}`;
                let body = `Codacy detected **${issues.length}** issue(s) for rule \`${first.patternInfo.id}\`:\n\n`;
            
                for (const issue of issues) {
                  body += `- **${issue.patternInfo.severityLevel}** at \`${issue.filePath}:${issue.lineNumber}\` → ${issue.message}\n`;
                }
            
                body += `\nSee full details in [Codacy Report](https://app.codacy.com/gh/<org>/<repo>/issues)\n\n`;
                body += `Unique ID: \`${key}\``;
            
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title,
                  body,
                  labels: ["codacy"]
                });
            
                // ✅ Sleep 2 seconds to avoid secondary rate limits
                await new Promise(resolve => setTimeout(resolve, 2000));
              }
            }                           
